[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "storymapjs"
version = "0.9.4"
description = "StoryMapJS is a tool for telling stories through the context of places on a map"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "ISC"}
authors = [
    {name = "Knight Lab", email = "knightlab@northwestern.edu"},
]
dependencies = [
    "boto3==1.34.*",
    "Flask==3.0.*",
    "Flask-Cors==4.0.*",
    "google-api-python-client==2.115.*",
    "gunicorn==21.2.*",
    "huey==2.5.*",
    "oauth2client==4.1.*",
    "psycopg2-binary==2.9.*",
    "python-slugify==8.0.*",
    "requests==2.31.*",
    "Werkzeug==3.0.1",
]

[tool.hatch.build.targets.wheel]
packages = ["storymap"]

[project.urls]
Homepage = "https://github.com/NUKnightLab/StoryMapJS"
Issues = "https://github.com/NUKnightLab/StoryMapJS/issues"

[tool.hatch.envs.default]
dependencies = [
    "pytest>=8.0",
    "pytest-cov>=4.1",
    "pytest-mock>=3.12",
]

[tool.hatch.envs.unit]
description = "Unit tests for Flask application (no Docker required)"
dependencies = [
    "pytest>=8.0",
    "pytest-cov>=4.1",
    "pytest-mock>=3.12",
    "moto[s3]>=5.0",  # Mock AWS services
    "fakeredis>=2.21",  # Mock Redis for Huey
]

[tool.hatch.envs.unit.scripts]
test = "pytest tests/unit_tests.py -v {args}"
test-cov = "pytest tests/unit_tests.py --cov=storymap --cov-report=term-missing --cov-report=html {args}"
test-watch = "pytest tests/unit_tests.py -v --tb=short -x {args}"

[tool.hatch.envs.integration]
description = "Integration tests for full stack (requires Docker)"
dependencies = [
    "pytest>=8.0",
    "pytest-docker>=3.1",
    "requests>=2.31",
    "selenium>=4.16",  # For browser testing if needed
]

[tool.hatch.envs.integration.scripts]
test = "pytest tests/integration_tests.py -v {args}"
test-slow = "pytest tests/integration_tests.py -v --tb=long {args}"

[tool.hatch.envs.dev]
description = "Development environment with all tools"
dependencies = [
    "pytest>=8.0",
    "pytest-cov>=4.1",
    "pytest-mock>=3.12",
    "pytest-docker>=3.1",
    "moto[s3]>=5.0",
    "fakeredis>=2.21",
    "requests>=2.31",
    "ipython>=8.20",
    "ruff>=0.2",
]

[tool.hatch.envs.dev.scripts]
unit = "pytest tests/unit_tests.py -v {args}"
integration = "pytest tests/integration_tests.py -v {args}"
all = "pytest tests/ -v {args}"
lint = "ruff check storymap/ tests/"
format = "ruff format storymap/ tests/"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py", "*_tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "unit: Unit tests that don't require Docker",
    "integration: Integration tests that require Docker Compose",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["storymap"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]
ignore = [
    "E501",  # line too long (handled by formatter)
]
